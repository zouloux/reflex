{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,gBCAAD,EAAAC,EAAA,S,YAUA,SAASC,IACR,MAAO,CACNC,WAAY,EAAAC,EAAAC,YAAYD,EAAAE,eACxBC,UAAW,EAAAH,EAAAC,YAAYD,EAAAI,cACvBC,SAAW,EAAAL,EAAAM,eACXC,IAAO,EAAAP,EAAAQ,cAUT,SAASC,EAAgBC,IAGxB,EAAAd,EAAAe,UAAS,IAAMD,EAAME,KAAKL,KAAIM,IAC7BC,QAAQC,IAAI,gBAAgBF,mBACrBG,IACNF,QAAQC,IAAI,mBAAmBC,oBAKjC,EAAApB,EAAAe,UAAS,IAAMD,EAAME,KAAKP,UAASA,IAClCS,QAAQC,IAAI,QAAQL,EAAME,KAAKb,aAAaM,EAAU,KAAO,qBAI9D,MAAMY,GAAO,EAAArB,EAAAsB,OACPC,GAAQ,EAAAvB,EAAAsB,OAKd,OAJA,EAAAtB,EAAAe,UAAQ,KACPG,QAAQC,IAAI,8BAA+BE,EAAKG,IAAKD,EAAMC,IAAIC,aAAa,WAGtE,KAAM,EAAAzB,EAAA0B,GAAC,MAAG,CAACJ,IAAMD,EAAOM,MAAM,iBAAgB,SAC5Cb,EAAME,KAAKb,UAAW,IAAGW,EAAME,KAAKT,UAC5C,EAAAP,EAAA0B,GAAC,MAAG,CAACE,IAAK,+BAA+Bd,EAAME,KAAKL,KAAMW,IAAMC,KAI3D,SAASM,IACf,MAAMC,GAAc,EAAA9B,EAAA+B,OAAc7B,GAClC,MAAO,KAAM,EAAAF,EAAA0B,GAAC,MAAG,MAChB,EAAA1B,EAAA0B,GAAC,SAAM,CAACM,QAAUC,GAAKH,EAAYI,IAAKhC,IAAkB,gBAC1D,EAAAF,EAAA0B,GAACb,EAAa,CAACG,KAAOc,EAAYK,UD0CpC,EAAAC,EAAAC,iBAAgB,GAET,WACN,MAAMC,GAAI,EAAAF,EAAAG,mBAAkB,mBAC5B,EAAAvC,EAAAwC,SAAQ,EAAAxC,EAAA0B,GAACG,EAAY,MAAKY,SAASC,MACnCJ,IAGDK","sources":["demos/1-props-demo/index.tsx","demos/1-props-demo/PropsDemoApp.tsx"],"sourcesContent":["import { h, render } from \"../../src/reflex\";\nimport { trackPerformances, setReflexDebug } from \"../../src/reflex/debug\";\nimport { PropsDemoApp } from \"./PropsDemoApp\";\n\n\n/**\n * REFLEX JS\n *\n * - Reflex Core\n * \t\t- Core\n * \t\t- Polyfills\n * \t\t- Signal + Observer\n * \t\t- YADL\n * \t\t- Utils\n * - Reflex Components\n * \t\t- Reflex View (vdom + web components)\n * \t\t- Reflex Store\n * \t\t\t- Regular store / Async store or one big store well-made\n * \t\t- Reflex Router\n * \t\t\t- Based on Reflex Store\n * \t\t- Reflex Tween ?\n *\t\t- Reflex Toolkit\n *\t\t\t- Hooks\n *\t\t\t- Responsive\n *\t\t\t- Inputs\n *\t\t\t- Cursor\n *\t\t\t- Sound\n *\t\t\t- Viewport\n *\t\t- Reflex UI Kit\n *\t\t\t- mixins\n *\t\t\t- UI Kit\n *\t\t\t- Components ( Slideshow / Menu / Player ... )\n * - Reflex Server\n *\n */\n\n/**\n * FEATURES :\n *\n * - Basic v-dom\n * \t ✔ Create / remove elements\n * \t ✔ Set / remove attributes\n * \t ✔ Set / remove event listeners\n * \t ✔ Reuse previous components, do not trash everything everytime\n * \t ✔ innerHTML\n *   ✔ Class as string or array filtered with booleans\n *   \t- Optimize class when does not changes, is it possible ?\n *   ✔ Style as object only\n *   \t- Optimize style when does not changes, is it possible ?\n *\n * - Advanced v-dom\n *   ✔ Move elements and keep track of dom elements with keyed virtual nodes\n *   \t✔ Add to top\n *   \t✔ Add to bottom\n *   \t✔ Remove from top\n *   \t✔ Remove from bottom\n *   \t✔ Insert in the middle\n *      ✔ Remove from the middle\n *      ✔ Basic swap\n *  \tX Optimized Swap\n *  \t\t- Do 2 operations, should do only one\n *   ✔ Keep track of component instances\n *   ✔ Remove subtrees recursively\n *   ✔ Sub tree rendering\n *   ✔ Rendering optimization (like memo and skip)\n *\n * - Reactive\n *   ✔ Dom ref / component ref\n *   ✔ Factory helpers (like hooks), find name and prefix\n *   ✔ Var in ref as let ! Yeah\n *   ✔ States / observers\n *   ✔ Stores\n *   ✔ Mount / Unmount\n *   ✔ Updated + Props\n *\n * - Advanced Reactive\n *   - Multi refs in for loops and stuff, need to keep correct indexes even when moving\n *   - Factory Errors / Component errors ( try catch on instance + render etc )\n *   - Async states ! With cancellation\n *   - Fetch hook with race condition management + states + cache + cancellable\n *   - Imperative handles\n *\n * - Types\n * \t - Basic JSX Type\n * \t - Render and component return JSX Types\n * \t - Props types\n *\n * - Release\n * \t - Optimize\n * \t - Benchmark\n * \t - Docs\n * \t - Release\n *\n * V2 :\n * - Advanced Hot Module reloading with state keeping automagically\n */\n\n// -----------------------------------------------------------------------------\n\nsetReflexDebug( true )\n\nexport function init () {\n\tconst p = trackPerformances(\"Root rendering\")\n\trender( <PropsDemoApp />, document.body )\n\tp();\n}\n\ninit();\n","import { h, state, changed, ref } from \"../../src/reflex\";\nimport { createUID, firstnameList, lastnameList, pickRandom, randBoolean } from \"../demoHelpers\";\n\ninterface IUser {\n\tfirstname\t:string\n\tlastname\t:string\n\tisAdmin\t\t?:boolean\n\tid\t\t\t:string\n}\n\nfunction getRandomUser ():IUser {\n\treturn {\n\t\tfirstname\t: pickRandom( firstnameList ),\n\t\tlastname\t: pickRandom( lastnameList ),\n\t\tisAdmin\t\t: randBoolean(),\n\t\tid\t\t\t: createUID()\n\t}\n}\n\n// -----------------------------------------------------------------------------\n\ninterface IUserComponentProps {\n\tuser\t\t:IUser\n}\n\nfunction UserComponent ( props:IUserComponentProps ) {\n\n\t// Will disconnect previous user from chat, and connect new user\n\tchanged( () => props.user.id, newId => {\n\t\tconsole.log(`Connect user ${newId} to chat panel`)\n\t\treturn oldId => {\n\t\t\tconsole.log(`Disconnect user ${oldId} from chat`)\n\t\t}\n\t})\n\n\t// Will show a log if isAdmin is changing on props.user\n\tchanged( () => props.user.isAdmin, isAdmin => {\n\t\tconsole.log(`User ${props.user.firstname} ${isAdmin ? 'is' : 'is not'} admin`)\n\t})\n\n\t// This proves that after render, refs are updated correctly and available right after\n\tconst root = ref()\n\tconst image = ref()\n\tchanged(() => {\n\t\tconsole.log(\"UserComponent just rendered\", root.dom, image.dom.getAttribute('src'))\n\t})\n\n\treturn () => <div ref={ root } class=\"UserComponent\">\n\t\tHello { props.user.firstname } { props.user.lastname }\n\t\t<img src={`https://i.pravatar.cc/150?u=${props.user.id}`} ref={ image } />\n\t</div>\n}\n\nexport function PropsDemoApp () {\n\tconst currentUser = state<IUser>( getRandomUser )\n\treturn () => <div>\n\t\t<button onClick={ e => currentUser.set( getRandomUser ) }>Change user</button>\n\t\t<UserComponent user={ currentUser.value } />\n\t</div>\n}\n"],"names":["$leUMy","parcelRequire","$bf00b88c5c84bc0f$var$getRandomUser","firstname","$hvc62","pickRandom","firstnameList","lastname","lastnameList","isAdmin","randBoolean","id","createUID","$bf00b88c5c84bc0f$var$UserComponent","props","changed","user","newId","console","log","oldId","root","ref","image","dom","getAttribute","h","class","src","$bf00b88c5c84bc0f$export$7539f4155476ffb2","currentUser","state","onClick","e","set","value","$3AbUl","setReflexDebug","p","trackPerformances","render","document","body","$ad7b630f6f78ecec$export$2cd8252107eb640b"],"version":3,"file":"index.88bf6d3f.js.map"}