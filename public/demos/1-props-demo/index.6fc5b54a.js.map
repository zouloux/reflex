{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SCGA,IAAIC,GAAqB,ECHzBF,EAAAC,EAAA,SCCO,MAAME,EAASC,MAAgBA,GAAGC,SAAS,IAErCC,EAA6BC,GAAgBA,KAAUC,KAAKC,SAAWF,EAAMG,SAE7EC,EAAc,CAACC,EAAY,KAAQJ,KAAKC,SAAWG,EAInDC,EAAgB,CAAC,SAAU,UAAW,OAAQ,UAC9CC,EAAe,CAAC,SAAU,QAAS,YAAa,QDA7D,SAASC,IACR,MAAO,CACNC,UAAYV,EAAYO,GACxBI,SAAWX,EAAYQ,GACvBI,QAAWP,IACXQ,GCb6B,GAAGhB,EAAMiB,KAAKC,UAAUlB,EAAsB,UAAhBK,KAAKC,aDuBlE,SAASa,EAAgBC,IAGxB,EAAAvB,EAAAwB,UAAS,IAAMD,EAAME,KAAKN,KAAIO,IAC7BC,QAAQC,IAAI,gBAAgBF,mBACrBG,IACNF,QAAQC,IAAI,mBAAmBC,oBAKjC,EAAA7B,EAAAwB,UAAS,IAAMD,EAAME,KAAKP,UAASA,IAClCS,QAAQC,IAAI,QAAQL,EAAME,KAAKT,aAAaE,EAAU,KAAO,qBAI9D,MAAMY,GAAO,EAAA9B,EAAA+B,OACPC,GAAQ,EAAAhC,EAAA+B,OAKd,OAJA,EAAA/B,EAAAwB,UAAQ,KACPG,QAAQC,IAAI,8BAA+BE,EAAKG,IAAKD,EAAMC,IAAIC,aAAa,WAGtE,KAAM,EAAAlC,EAAAmC,GAAC,MAAG,CAACJ,IAAMD,EAAOM,MAAM,iBAAgB,SAC5Cb,EAAME,KAAKT,UAAW,IAAGO,EAAME,KAAKR,UAC5C,EAAAjB,EAAAmC,GAAC,MAAG,CAACE,IAAK,+BAA+Bd,EAAME,KAAKN,KAAMY,IAAMC,KAI3D,SAASM,IACf,MAAMC,GAAc,EAAAvC,EAAAwC,OAAczB,GAClC,MAAO,KAAM,EAAAf,EAAAmC,GAAC,MAAG,MAChB,EAAAnC,EAAAmC,GAAC,SAAM,CAACM,QAAUC,GAAKH,EAAYI,IAAK5B,IAAkB,gBAC1D,EAAAf,EAAAmC,GAACb,EAAa,CAACG,KAAOc,EAAYK,SDlDnC1C,GDDe,EAET,WACN,MAAM2C,ECKE,QDJR,EAAA7C,EAAA8C,SAAQ,EAAA9C,EAAAmC,GAACG,EAAY,MAAKS,SAASC,MACnCH,IAGDI","sources":["demos/1-props-demo/index.tsx","src/reflex/debug.ts","demos/1-props-demo/PropsDemoApp.tsx","demos/demoHelpers.ts"],"sourcesContent":["import { h, render } from \"../../src/reflex\";\nimport { trackPerformances, setReflexDebug } from \"../../src/reflex/debug\";\nimport { PropsDemoApp } from \"./PropsDemoApp\";\n\n// -----------------------------------------------------------------------------\n\nsetReflexDebug( true )\n\nexport function init () {\n\tconst p = trackPerformances(\"Root rendering\")\n\trender( <PropsDemoApp />, document.body )\n\tp();\n}\n\ninit();\n","\n// ----------------------------------------------------------------------------- ENABLE / DISABLE\n\nlet _enableReflexDebug = false;\n\nexport function getReflexDebug () { return _enableReflexDebug }\nexport function setReflexDebug (value:boolean) {\n\t_enableReflexDebug = value\n}\n\n// ----------------------------------------------------------------------------- TRACK PERFORMANCES\n\nexport function trackPerformances ( subject:string ) {\n\tif ( !_enableReflexDebug || process.env.NODE_ENV === \"production\" )\n\t\treturn () => {};\n\tconst start = performance.now()\n\treturn () => {\n\t\tconst delta = ~~( performance.now() - start )\n\t\tconsole.info( subject, delta < 1000 ? `${delta}ms` : `${delta/1000}s`)\n\t}\n}","import { h, state, changed, ref } from \"../../src/reflex\";\nimport { createUID, firstnameList, lastnameList, pickRandom, randBoolean } from \"../demoHelpers\";\n\ninterface IUser {\n\tfirstname\t:string\n\tlastname\t:string\n\tisAdmin\t\t?:boolean\n\tid\t\t\t:string\n}\n\nfunction getRandomUser ():IUser {\n\treturn {\n\t\tfirstname\t: pickRandom( firstnameList ),\n\t\tlastname\t: pickRandom( lastnameList ),\n\t\tisAdmin\t\t: randBoolean(),\n\t\tid\t\t\t: createUID()\n\t}\n}\n\n// -----------------------------------------------------------------------------\n\ninterface IUserComponentProps {\n\tuser\t\t:IUser\n}\n\nfunction UserComponent ( props:IUserComponentProps ) {\n\n\t// Will disconnect previous user from chat, and connect new user\n\tchanged( () => props.user.id, newId => {\n\t\tconsole.log(`Connect user ${newId} to chat panel`)\n\t\treturn oldId => {\n\t\t\tconsole.log(`Disconnect user ${oldId} from chat`)\n\t\t}\n\t})\n\n\t// Will show a log if isAdmin is changing on props.user\n\tchanged( () => props.user.isAdmin, isAdmin => {\n\t\tconsole.log(`User ${props.user.firstname} ${isAdmin ? 'is' : 'is not'} admin`)\n\t})\n\n\t// This proves that after render, refs are updated correctly and available right after\n\tconst root = ref()\n\tconst image = ref()\n\tchanged(() => {\n\t\tconsole.log(\"UserComponent just rendered\", root.dom, image.dom.getAttribute('src'))\n\t})\n\n\treturn () => <div ref={ root } class=\"UserComponent\">\n\t\tHello { props.user.firstname } { props.user.lastname }\n\t\t<img src={`https://i.pravatar.cc/150?u=${props.user.id}`} ref={ image } />\n\t</div>\n}\n\nexport function PropsDemoApp () {\n\tconst currentUser = state<IUser>( getRandomUser )\n\treturn () => <div>\n\t\t<button onClick={ e => currentUser.set( getRandomUser ) }>Change user</button>\n\t\t<UserComponent user={ currentUser.value } />\n\t</div>\n}\n","\nexport const toHex = (n:number) => (~~n).toString(16)\nexport const createUID = () => `${toHex(Date.now())}-${toHex(Math.random() * 999999999)}`;\nexport const pickRandom = <G extends any>(array:G[]):G => array[ ~~(Math.random() * array.length) ]\nexport const rand = (max:number) => ~~(Math.random() * max)\nexport const randBoolean = (threshold = .5) => (Math.random() > threshold)\n\nexport const foodList = [\"Cheese\", \"Carrots\", \"Pastas\", \"Pizza\", \"Burgers\", \"Ham\", \"Salad\", \"Mustard\"]\nexport const colorList = [\"Red\", \"Blue\", \"Yellow\", \"Purple\", \"Orange\", \"Black\", \"White\", \"Green\"]\nexport const firstnameList = [\"Alfred\", \"Jessica\", \"Gwen\", \"Jeanne\"]\nexport const lastnameList = [\"Dupont\", \"Smith\", \"Stevensen\", \"Odea\"]\n"],"names":["$leUMy","parcelRequire","$228131962d4ca37f$var$_enableReflexDebug","$00c98e03044c15dd$export$7ea66e3774a60b67","n","toString","$00c98e03044c15dd$export$2e015b6955893291","array","Math","random","length","$00c98e03044c15dd$export$e7f2be8fe70b5202","threshold","$00c98e03044c15dd$export$53266ee726a299e0","$00c98e03044c15dd$export$cfc29f1b5b07ff6b","$bf00b88c5c84bc0f$var$getRandomUser","firstname","lastname","isAdmin","id","Date","now","$bf00b88c5c84bc0f$var$UserComponent","props","changed","user","newId","console","log","oldId","root","ref","image","dom","getAttribute","h","class","src","$bf00b88c5c84bc0f$export$7539f4155476ffb2","currentUser","state","onClick","e","set","value","p","render","document","body","$ad7b630f6f78ecec$export$2cd8252107eb640b"],"version":3,"file":"index.6fc5b54a.js.map"}