import { _isStringOrNumber, _TEXT_NODE_TYPE_NAME, VNode } from "./common";

// NOTE : Keep it in a function and do not inline this
// It seems to be V8 optimized. @see Preact source code
export function _createVNode ( type, props, key?, _ref? ):VNode {
	return { type, props, key, _ref }
}

export function _cloneVNode ( vnode:VNode ) {
	const newNode = Object.assign({}, vnode)
	// IMPORTANT : also clone props object
	newNode.props = Object.assign({}, vnode.props)
	return newNode
	/*return {
		...vnode,
		// IMPORTANT : also clone props object
		props: { ...vnode.props }
	}*/
}


export function h ( type, props, ...children ) {
	// Remove debug properties
	// FIXME : Keep them in debug mode ? But in vnode not in props.
	let nodeProps:any = {}
	let key, ref
	if ( props ) {
		for ( let i in props ) {
			const value = props[ i ]
			// Set apart key and ref
			if ( i == "key" )
				key = value
			else if ( i == "ref" )
				ref = value
			// Remove __self and __source debug props
			else if ( !i.startsWith('__') )
				nodeProps[i] = value
		}
		// Append children props into children array
		if ( _isStringOrNumber(props.children) )
			children.push( props.children )
		else if ( Array.isArray(props.children) )
			children.concat( props.children )
	}
	// Inject children in props and override
	nodeProps.children = children.map( child => (
		// Convert string and number children to text virtual nodes
		_isStringOrNumber( child )
		? _createVNode( _TEXT_NODE_TYPE_NAME, { value: '' + child } )
		// Otherwise keep child generated by JSX
		: child
	))
	return _createVNode( type, nodeProps, key, ref )
}